service: resizer-service

provider:
  name: aws
  runtime: rust
  memorySize: 128
  profile: kanji
  region: ap-northeast-1

plugins:
  - serverless-rust
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

package:
  individually: true


iamRoleForS3: &iamRoleForS3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::resizer-service-images-kaicoh/*"

functions:
  initiator:
    handler: initiator
    events:
      - s3:
          bucket: resizer-service-images-kaicoh
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
    iamRoleStatementsName: execute-step-functions
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "states:ListStateMachines"
          - "states:StartExecution"
        Resource: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:*
  resizer:
    handler: resizer
    iamRoleStatementsName: handle-s3-objects-for-resizer
    <<: *iamRoleForS3
  cropper:
    handler: cropper
    iamRoleStatementsName: handle-s3-objects-for-cropper
    <<: *iamRoleForS3
  saver:
    handler: saver

stepFunctions:
  stateMachines:
    imageProcessing:
      definition:
        Comment: "Image processing state machine"
        StartAt: Parallel
        States:
          Parallel:
            Type: Parallel
            Next: FinalState
            Branches:
              - StartAt: ResizeImage
                States:
                  ResizeImage:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-resizer
                    End: true
              - StartAt: SaveImageMetadata
                States:
                  SaveImageMetadata:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-saver
                    End: true
              - StartAt: CropImage
                States:
                  CropImage:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-cropper
                    End: true
          FinalState:
            Type: Pass
            End: true
